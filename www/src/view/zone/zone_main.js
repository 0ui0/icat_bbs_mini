// Generated by CoffeeScript 2.6.1
var Body, Box, Chest, Container, Coordinate, Foot, Head, Notice, chestGroup, chestGroupPos, chestGroupPos_bak, getPos, m, numOfX, rectSize, remainSpace, spaceWidth, tiles, tools;

m = require("mithril");

// common
Head = require("../common/head");

Foot = require("../common/foot");

Notice = require("../common/notice");

Container = require("../common/container");

Box = require("../common/box");

tools = require("../help/tools");

Chest = require("./zone_chest");

// component
numOfX = 0;

remainSpace = 0;

spaceWidth = 0;

rectSize = {
  width: 100,
  height: 100
};

getPos = function(order, rectSize, contentWidth, reduceRate) {
  var height, width;
  ({width, height} = rectSize);
  reduceRate = 1 || reduceRate; //调整比例
  // x轴的磁贴数量
  numOfX = Math.floor(contentWidth / width) - reduceRate;
  // 剩余空间长度
  remainSpace = (contentWidth % width) + width * reduceRate;
  // 间距
  spaceWidth = Math.round(remainSpace / (numOfX - 1));
  return {
    x: (order % numOfX) * (width + spaceWidth),
    y: Math.floor(order / numOfX) * (height + spaceWidth)
  };
};

chestGroupPos = (function() {
  var results = [];
  for (var i = 0; i <= 39; i++){ results.push(i); }
  return results;
}).apply(this).map(function(item) {
  return getPos(item, rectSize, 960);
});

chestGroupPos_bak = chestGroupPos.map(function(item) {
  return {
    x: item.x,
    y: item.y
  };
});

chestGroup = chestGroupPos.map(function(item, index) {
  var tmp;
  tmp = new Chest({
    w: 100,
    h: 100
  }, item, "red", chestGroupPos_bak);
  tmp.create();
  return tmp;
});

Coordinate = {
  blocks: [],
  xW: 100,
  yW: 100,
  xNum: 0,
  yNum: 0,
  space: 0,
  map: function(site) {
    return {
      x: site.x * (this.xW + this.space),
      y: site.y * (this.yW + this.space)
    };
  },
  remap: function(site) {
    return {
      x: site.x / (this.xW + this.space),
      y: site.y / (this.yW + this.space)
    };
  },
  add: function(div, sizeNum, site) {
    var chest, leftItem, position, size, transBlocks, upItem;
    position = {...position};
    size = (function() {
      switch (sizeNum) {
        case 1:
          return {
            w: 100,
            h: 100
          };
        case 2:
          return {
            w: 200 + this.space,
            h: 100
          };
        case 3:
          return {
            w: 200 + this.space,
            h: 200 + this.space
          };
      }
    }).call(this);
    if (site) {
      site = this.map(site, size);
    } else {
      if (this.blocks.length === 0) {
        site = {
          x: 0,
          y: 0
        };
      } else {
        leftItem = this.blocks[this.blocks.length - 1];
        transBlocks = this.blocks.slice().sort((a, b) => {
          a = this.remap(a.site);
          b = this.remap(b.site);
          return a.y - b.y;
        });
        console.log(this.blocks);
        //pp transBlocks
        upItem = transBlocks[transBlocks.length - 1];
        
        // 如果是最后一个元素，那么下移一行，横坐标归零，纵坐标+1
        if (this.remap(leftItem.site).x + (leftItem.size.w / this.xW).to_i() + 1 * (size.w / this.xW).to_i() > this.xNum) {
          site = {};
          site.x = 0;
          site.y = this.map({
            x: 0,
            y: this.remap(leftItem.site).y + 1
          }).y;
        } else {
          site = {
            x: leftItem.site.x + leftItem.size.w + this.space,
            y: upItem.site.y + upItem.size.h + this.space
          };
        }
      }
    }
    chest = new Chest(size, site);
    chest.create(div);
    return this.blocks.push(chest);
  },
  oninit: function(v) {
    var _this;
    // 转化坐标系
    _this = this.__proto__;
    _this.xNum = (v.attrs.width / this.xW).to_i() - 1;
    _this.yNum = (v.attrs.height / this.yW).to_i() - 1;
    // this的指向的是实例框架内部生成的实例，所以要访问修改原型
    return _this.space = ((v.attrs.width - _this.xNum * this.xW) / (_this.xNum - 1)).to_i();
  },
  view: function(v) {
    var _this;
    _this = this;
    return m("", {
      style: {
        position: "relative",
        width: v.attrs.width + 'px',
        height: v.attrs.height + 'px'
      }
    }, [
      this.blocks.length >= 0 ? this.blocks.map((item) => {
        return m(item.main);
      }) : void 0
    ]);
  }
};

tiles = {
  avatar: {
    key: 1,
    pos: {
      x: 0,
      y: 0
    },
    view: function(v) {
      return m("span", {
        style: {
          position: "relative"
        }
      }, "头像");
    }
  },
  message: {
    key: 2,
    pos: {
      x: 50,
      y: 50
    },
    view: function(v) {
      return m("span", {
        style: {
          position: "relative"
        }
      }, "头像");
    }
  }
};

Body = {
  view: function(v) {
    var _this;
    _this = this;
    return m("", [
      m(Container,
      [
        m("",
        "个人中心"),
        /* m "",
                 style:
                   display:"block"
                   position:"relative"
                   height:"600px"   
               ,[
                 chestGroup.map (item)->m item.main    
               ] */
        m(Coordinate,
        {
          width: 960,
          height: 500
        }),
        m("button",
        {
          onclick: function() {
            var item1;
            item1 = {
              view: function(v) {
                return m("",
        {
                  style: {
                    color: "white",
                    fontSize: "16px"
                  }
                },
        v.children);
              }
            };
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        2);
            Coordinate.add(m(item1.to_s()),
        2);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        3);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        3);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        2);
            Coordinate.add(m(item1.to_s()),
        1);
            Coordinate.add(m(item1.to_s()),
        3);
            return Coordinate.add(m(item1.to_s()),
        1);
          }
        },
        "按钮")
      ])
    ]);
  }
};

module.exports = {
  view: function(v) {
    var _this;
    _this = this;
    return m("", [m(Head), m(Body), m(Foot)]);
  }
};
