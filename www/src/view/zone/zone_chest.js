// Generated by CoffeeScript 2.6.1
var Chest, m;

m = require("mithril");

Chest = class Chest {
  constructor(size, site, color, group) {
    this.size = {...size};
    this.site = {...site};
    this.color = color || "gray";
    if (group) {
      this.group = group;
    }
    this.main = {};
    this.defaultSite = {};
  }

  create(div) {
    var _this, isShadow, isTopest;
    isShadow = false;
    isTopest = false;
    _this = this;
    return this.main = {
      view: () => {
        return m("", {
          style: {
            position: "absolute",
            width: `${_this.size.w}px`,
            height: `${_this.size.h}px`,
            left: `${_this.site.x}px`,
            top: `${_this.site.y}px`,
            backgroundColor: this.color,
            borderRadius: "0.5rem",
            boxShadow: isShadow ? "1px 1px 10px rgba(0,0,0,0.5)" : "none",
            zIndex: isTopest ? 999 : "auto"
          },
          onmousedown: function(e) {
            var defaultSite, getMouse, mouse, mouseMove, mouseUp;
            e = event || e;
            isShadow = true;
            isTopest = true;
            getMouse = function(e) {
              e = event || e;
              return {
                x: e.clientX,
                y: e.clientY
              };
            };
            mouse = getMouse(e);
            defaultSite = {
              x: _this.site.x,
              y: _this.site.y
            };
            document.addEventListener("mousemove", mouseMove = function(e) {
              var dis, newMouse;
              newMouse = getMouse(e);
              dis = {
                x: mouse.x - newMouse.x,
                y: mouse.y - newMouse.y
              };
              _this.site.x -= dis.x;
              _this.site.y -= dis.y;
              m.redraw();
              return mouse = getMouse(e);
            });
            mouseUp = null;
            return document.addEventListener("mouseup", mouseUp = function(e) {
              var disArr;
              if (_this.group) {
                disArr = _this.group.map(function(item) {
                  var tmp;
                  tmp = [_this.site.x, _this.site.y]["<->"]([item.x, item.y]);
                  return tmp.to_i();
                });
                _this.newSite(_this.group[disArr.indexOf(disArr.min())], function() {
                  isShadow = false;
                  return isTopest = false;
                });
              } else {
                _this.newSite(defaultSite, function() {
                  isShadow = false;
                  return isTopest = false;
                });
              }
              document.removeEventListener("mousemove", mouseMove);
              return document.removeEventListener("mouseup", mouseUp);
            });
          }
        }, ["abc"]);
      }
    };
  }

  newSite(json, fnEnd) {
    var _this, run;
    _this = this;
    run = function(target, site, prop) {
      var timer;
      clearInterval(timer);
      return timer = setInterval(function() {
        var speed;
        speed = (target - site[prop]) / 8;
        speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed);
        if (Math.abs(site[prop] - target) <= Math.abs(speed)) {
          site[prop] = target;
          if (fnEnd) {
            fnEnd();
          }
          clearInterval(timer);
        } else {
          site[prop] += speed;
        }
        return m.redraw();
      }, 30);
    };
    if (json.x != null) {
      run(json.x, this.site, "x");
    }
    if (json.y != null) {
      return run(json.y, this.site, "y");
    }
  }

  newSize(json) {
    if (json.w) {
      this.size.w = json.w;
    }
    if (json.h) {
      return this.size.h = json.h;
    }
  }

};

module.exports = Chest;
