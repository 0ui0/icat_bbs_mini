// Generated by CoffeeScript 2.6.1
var Box, Container, Nav, Notice, Tag, Vditor, format, homeData, isLogined, isMobile, m, tools, 滑块调整开始监听;

m = require("mithril");

Box = require("../common/box");

Tag = require("../common/tag");

Nav = require("../common/nav");

tools = require("../help/tools");

format = require("../help/format");

isLogined = require("../help/isLogined");

Container = require("../common/container");

Notice = require("../common/notice");

Vditor = require("vditor");

homeData = require("./home_data");

isMobile = tools.isMobile();

滑块调整开始监听 = function(类型, 对象, 事件, 外部变量) {
  var ref, 监听移动, 监听移动函数, 监听终止, 监听终止函数, 距离;
  switch (类型) {
    case "鼠标":
      监听移动 = "mousemove";
      监听终止 = "mouseup";
      break;
    case "触摸":
      监听移动 = "touchmove";
      监听终止 = "touchend";
  }
  距离 = ((ref = 事件.clientY) != null ? ref : 事件.touches[0].clientY) - 外部变量.data.height;
  document.addEventListener(监听移动, 监听移动函数 = function(e) {
    var mouseY, ref1, 三分之一高度, 三分之二高度;
    mouseY = (ref1 = e.clientY) != null ? ref1 : e.touches[0].clientY;
    e.preventDefault(); //阻止鼠标默认行为
    三分之一高度 = document.documentElement.clientHeight / 3;
    三分之二高度 = Math.round(document.documentElement.clientHeight * 2 / 3);
    if (mouseY <= 0) {
      外部变量.data.height = 0;
      return;
    }
    if (mouseY >= 三分之二高度) {
      外部变量.data.height = 三分之二高度;
      return;
    }
    外部变量.data.height = mouseY - 距离;
    return m.redraw(); //立即刷新，防止页面卡顿
  });
  return document.addEventListener(监听终止, 监听终止函数 = function() {
    document.removeEventListener(监听移动, 监听移动函数);
    return document.removeEventListener(监听终止, 监听终止函数);
  });
};

module.exports = {
  oninit: function() {
    return window.addEventListener("resize", function() {
      isMobile = tools.isMobile();
      return m.redraw();
    });
  },
  Text: Box(),
  data: {
    show: false,
    linkid: 0,
    replyTo: "",
    pid: null,
    self: null,
    height: Math.round(document.documentElement.clientHeight * 2 / 3)
  },
  method: {
    showReply: function() {}
  },
  view: function() {
    var _this, item;
    _this = this;
    return m("", [
      //m Notice
      m(Nav,
      {
        style: {
          height: "auto",
          background: "rgba(0,0,0,0.5)",
          display: _this.data.show ? "block" : "none",
          top: _this.data.height + "px",
          overflow: "auto"
        },
        isBottom: true,
        ext: {
          class: "animated pulse" //弹出动画
        }
      },
      [
        // 拖动条
        /* onbeforeremove:(v)->
                   v.dom.classList.add("zoomOut")
                   new Promise (res,rej)->
                     v.dom.addEventListener "animationend",res */
        m("",
        {
          style: {
            marginBottom: "0.5rem",
            background: "#000",
            height: "2rem",
            width: "100%",
            touchAction: "none",
            position: "relative",
            cursor: "row-resize"
          },
          onmousedown: function(e) {
            return 滑块调整开始监听("鼠标",
        this,
        e,
        _this);
          },
          ontouchstart: function(e) {
            return 滑块调整开始监听("触摸",
        this,
        e,
        _this);
          },
          onmouseover: function() {
            return this.style.opacity = "0.8";
          },
          onmouseout: function() {
            return this.style.opacity = "1";
          }
        },
        [
          (function() {
            var i,
          len,
          ref,
          results;
            ref = ["calc(50% - 2px)", "calc(50% + 1px)"];
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              results.push(m("span",
          {
                style: {
                  background: "#eee",
                  borderRadius: "0.3rem",
                  height: "0.1rem",
                  left: "calc(50% - 8px)",
                  position: "absolute",
                  width: "1.3rem",
                  top: item
                }
              }));
            }
            return results;
          })()
        ]),
        // 底部容器
        m(Container,
        [
          m("",
          {
            style: {
              display: "block"
            }
          },
          [
            // 工具栏
            // 回复对象
            _this.data.linkid ? m(Box, //如果有传入linkid，那么是回复，显示回复
            {
              isBtn: true,
              color: "dark",
              onclick: function() {
                _this.data.linkid = 0;
                _this.Text.data.value = "";
                return _this.data.show = false;
              }
            },
            `回复给：${_this.data.replyTo}（${this.data.linkid}）【点击取消】`) : void 0,
            // 编辑对象
            _this.data.pid ? m(Box, //如果有传入pid数据，那么是编辑而不是回复
            {
              isBtn: true,
              color: "dark",
              onclick: function() {
                _this.data.pid = null;
                _this.Text.data.value = "";
                return _this.data.show = false;
              }
            },
            "编辑：" + _this.data.pid + "【点击取消】") : void 0,
            // 提交按钮
            m(Box,
            {
              isBtn: true,
              color: "red",
              style: {
                marginBottom: 0
              },
              onclick: async function() {
                var err,
            ref,
            ref1,
            ref2,
            ref3,
            tmp;
                if (!isLogined()) {
                  return;
                }
                if (m.route.get() !== "/home" && _this.data.linkid === 0) {
                  m.route.set("/home");
                }
                try {
                  tmp = (await m.request({
                    method: "post",
                    url: "/api/posts/set",
                    body: {
                      type: _this.data.pid ? "edit" : "post",
                      title: _this.Text.data.value.split("\n")[0].slice(0,
            50),
                      content: _this.Text.data.value,
                      linkid: _this.data.linkid,
                      pid: _this.data.pid //编辑帖子用
                    }
                  }));
                  if (!tmp.valid) {
                    return Notice.launch({
                      msg: tmp.msg
                    });
                  }
                  //刷新数据
                  if (_this.data.linkid === 0) {
                    await homeData.fresh(_this.data.linkid,
            true,
            (ref = _this.data.self) != null ? (ref1 = ref.data) != null ? ref1.clickCount : void 0 : void 0,
            _this.data.self);
                  } else {
                    await homeData.fresh(_this.data.linkid,
            false,
            (ref2 = _this.data.self) != null ? (ref3 = ref2.data) != null ? ref3.clickCount : void 0 : void 0,
            _this.data.self);
                    _this.method.showReply();
                  }
                  _this.data.pid = null;
                  _this.data.show = false;
                  return _this.Text.data.value = "";
                } catch (error) {
                  err = error;
                  return console.log(err);
                }
              }
            },
            "提交")
          ]),
          // 编辑器
          // 高级模式
          /*
          m Box,
            isBtn:yes
            color:"dark"
            ext:
              onclick:->

                Notice.launch
                  content:
                    oncreate:->
                      window.vditor = new Vditor "vditor",{}
                      console.log vditor
                    view:->
                      m "#vditor",[]
                  confirm:->
                      console.log window.vditor.getValue()

          ,"高级模式"
          */
          m("",
          {
            style: {
              display: "grid",
              gridTemplateColumns: !isMobile ? "1fr 1fr" : "1fr",
              gridTemplateRows: isMobile ? "1fr 1fr" : void 0
            }
          },
          [
            m(_this.Text,
            {
              style: {
                bottom: 0,
                top: "50px",
                display: "block",
                resize: "none",
                minHeight: "10rem",
                height: `${document.documentElement.clientHeight - _this.data.height - 110}px`,
                marginBottom: "1rem"
              },
              tagName: "textarea",
              placeholder: `这里是输入框哦，隔壁是预览框
您输入的第一行将会成为标题`
            }),
            m(Box,
            {
              color: "white",
              class: "article",
              style: {
                overflow: "auto",
                display: "inline-block",
                height: `${document.documentElement.clientHeight - _this.data.height - 110}px`,
                marginBottom: "1rem"
              },
              ext: {
                onupdate: function(e) {
                  return e.dom.scrollTop = e.dom.scrollHeight;
                }
              }
            },
            m.trust(format(_this.Text.data.value)))
          ])
        ])
      ]),
      m(Box,
      {
        color: _this.data.show ? "yellow" : "red",
        style: {
          position: "fixed",
          right: "1rem",
          bottom: "1rem",
          borderRadius: "50%",
          width: "1.5rem",
          height: "1.5rem",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          cursor: "pointer",
          zIndex: "100",
          userSelect: "none"
        },
        onclick: function() {
          //isLogined() #判断是否登录
          return _this.data.show = !_this.data.show;
        }
      },
      [m("strong",
      _this.data.show ? "-" : "+")])
    ]);
  }
};
